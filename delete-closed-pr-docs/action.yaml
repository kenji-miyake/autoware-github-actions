name: delete-closed-pr-docs
description: ""

inputs:
  token:
    description: ""
    required: true

runs:
  using: composite
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.8

    - name: Install mike
      run: |
        pip3 install mike
      shell: bash

    # TODO: Remove after v1.2.0 or v2.0.0 is released
    - name: (tmp) Install latest mike
      run: |
        pip3 install -U git+https://github.com/jimporter/mike
      shell: bash

    - name: Get docs versions
      id: get-docs-versions
      run: |
        echo "site_name: dummy" > mkdocs.yaml
        echo "docs-versions=$(mike list | grep -oP "pr-\w+" | tr '\n' ' ' | sed 's/\s*$//')" >> $GITHUB_OUTPUT
      shell: bash

    - name: Find closed docs versions
      id: find-closed-docs-versions
      run: |
        echo "docs-versions: ${{ steps.get-docs-versions.outputs.docs-versions }}"

        closed_docs_versions=()
        for docs_version in ${{ steps.get-docs-versions.outputs.docs-versions }}; do
          pr_number=$(echo "$docs_version" | grep -oP "pr-\K([0-9]+)")
          url="https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number"

          echo "url: $url"
          response=$(curl -sSL "$url" -H "Authorization: token ${{ inputs.token }}")
          message=$(echo "$response" | grep -oP '"message": "\K([^"]+)') || true
          state=$(echo "$response" | grep -oP '"state": "\K([a-z]+)') || true

          if [ "$message" = "Not Found" ] || [ "$state" = "closed" ]; then
            closed_docs_versions+=("$docs_version")
          fi
        done

        echo "closed-docs-versions=${closed_docs_versions[@]}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Set git config
      uses: autowarefoundation/autoware-github-actions/set-git-config@v1
      with:
        token: ${{ inputs.token }}

    - name: Delete closed PR docs
      run: |
        echo "closed-docs-versions: ${{ steps.find-closed-docs-versions.outputs.closed-docs-versions }}"

        for closed_docs_version in ${{ steps.find-closed-docs-versions.outputs.closed-docs-versions }}; do
          git fetch

          echo "Delete docs version: $closed_docs_version."
          mike delete --push "$closed_docs_version"
        done
      shell: bash
