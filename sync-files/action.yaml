name: sync-files
description: ""

inputs:
  token:
    description: ""
    required: true
  config:
    description: ""
    required: false
    default: .github/sync-files.yaml
  pr-base:
    description: ""
    required: false
    default: ${{ github.event.repository.default_branch }}
  pr-branch:
    description: ""
    required: false
    default: sync-files
  pr-title:
    description: ""
    required: false
    default: "chore: sync files"
  pr-commit-message:
    description: ""
    required: false
    default: "chore: sync files"
  pr-labels:
    description: ""
    required: false
    default: ""
  pr-assignees:
    description: ""
    required: false
    default: ""
  pr-reviewers:
    description: ""
    required: false
    default: ""

runs:
  using: composite
  steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Set git config
      uses: autowarefoundation/autoware-github-actions/set-git-config@v1
      with:
        token: ${{ inputs.token }}

    - name: Set up Python
      uses: actions/setup-python@v3

    - name: Set up yq
      uses: chrisdickinson/setup-yq@v1.0.1
      with:
        yq-version: v4.17.2

    - name: Parse config
      run: |
        pip3 install pyyaml

        cat ${{ inputs.config }}
        python3 ${GITHUB_ACTION_PATH}/parse_config.py ${{ inputs.config }} > /tmp/sync-files.yaml
        cat /tmp/sync-files.yaml
      shell: bash

    - name: Sync files
      run: |
        set -e

        touch /tmp/result.yaml
        for repository in $(yq e ".[].repository" /tmp/sync-files.yaml); do
          yq e ".[] | select(.repository == \"$repository\")" /tmp/sync-files.yaml > /tmp/repo-config.yaml

          ref=$(yq e ".ref" /tmp/repo-config.yaml)

          git_options=()
          if [ "$ref" != "" ]; then
            git_options+=("-b $ref")
          fi

          rm -rf /tmp/repository
          git clone "$repository" /tmp/repository ${git_options[@]}

          for source_file in $(yq e ".files[].source" /tmp/repo-config.yaml); do
            yq e ".files[] | select(.source == \"$source_file\")" /tmp/repo-config.yaml > /tmp/file-config.yaml

            source_path=$(yq e ".source" /tmp/file-config.yaml)
            dest_path=$(yq e ".dest" /tmp/file-config.yaml)
            replace=$(yq e ".replace" /tmp/file-config.yaml)
            delete_orphaned=$(yq e ".delete-orphaned" /tmp/file-config.yaml)

            source_file="/tmp/repository/$source_path"
            if [ -f "$source_file" ]; then
              if [ -f "$dest_path" ] && [ "$replace" != "true" ]; then
                echo "Skip copying to $dest_path."
                yq -i e ".skipped += [\"$dest_path\"]" /tmp/result.yaml
                continue
              fi

              if ! [ -f "$dest_path" ]; then
                echo "Newly copy $source_path to $dest_path."
                cp "$source_file" "$dest_path"
                yq -i e ".added += [\"$dest_path\"]" /tmp/result.yaml
              elif ! diff "$source_file" "$dest_path"; then
                echo "Copy $source_path to $dest_path."
                cp "$source_file" "$dest_path"
                yq -i e ".changed += [\"$dest_path\"]" /tmp/result.yaml
              else
                echo "$source_path and $dest_path are the same."
                yq -i e ".not-changed += [\"$dest_path\"]" /tmp/result.yaml
              fi
            elif [ "$delete_orphaned" = "true" ]; then
              if [ -f "$dest_path" ]; then
                echo "Delete $dest_path."
                rm "$dest_path"
                yq -i e ".deleted += [\"$dest_path\"]" /tmp/result.yaml
              else
                echo "$dest_path was not found."
                yq -i e ".not-found += [\"$dest_path\"]" /tmp/result.yaml
              fi
            fi
          done
        done

        git status
      shell: bash

    - name: Create PR body
      id: create-pr-body
      run: |
        # Define function
        body_lines=()
        function add-section() {
          title="$1"
          key="$2"

          body_lines+=("## $title" "")
          for f in $(yq e ".$key[]" /tmp/result.yaml); do
            body_lines+=("- $f")
          done
          body_lines+=("")
        }

        # Add sections
        add-section "Skipped" "skipped"
        add-section "Added" "added"
        add-section "Changed" "changed"
        add-section "Not changed" "not-changed"
        add-section "Deleted" "deleted"
        add-section "Not found" "not-found"

        # Workaround for multiline strings
        # https://github.community/t/set-output-truncates-multiline-strings/16852
        body=$(printf "%s\n" "${body_lines[@]}")
        body="${body//'%'/'%25'}"
        body="${body//$'\n'/'%0A'}"
        body="${body//$'\r'/'%0D'}"

        # Output
        echo ::set-output name=body::"$(printf "%s\n" "${body[@]}")"
      shell: bash

    - name: Create PR
      id: create-pr
      uses: peter-evans/create-pull-request@v3
      with:
        token: ${{ inputs.token }}
        base: ${{ inputs.pr-base }}
        branch: ${{ inputs.pr-branch }}
        title: ${{ inputs.pr-title }}
        commit-message: ${{ inputs.pr-commit-message }}
        body: ${{ steps.create-pr-body.outputs.body }}
        labels: ${{ inputs.pr-labels }}
        assignees: ${{ inputs.pr-assignees }}
        reviewers: ${{ inputs.pr-reviewers }}
        signoff: true
        delete-branch: true

    - name: Check outputs
      run: |
        echo "Pull Request Number - ${{ steps.create-pr.outputs.pull-request-number }}"
        echo "Pull Request URL - ${{ steps.create-pr.outputs.pull-request-url }}"
      shell: bash
